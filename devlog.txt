balloons
Sophia Eiden
Josiah Moltz
Weichen Liu
pd 6
---------------------
Tic^2+Tac^2+Toe^2-2TicTac-2TicToe+2TacToe
*or*
Ultimate TicTacToe


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7 to 8 WHAT HAPPENED!?!?!?!?
We originally had an issue with setting square 7,8 to a value.
It was because of an issue in our brute force toString method.

when a player tries to navigate to a already won board, an issue arises where they have to input twice
- note* it works, just clunkily
 -- resolved! just had a doubling of the move in Woo.java
UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
when a player tries to navigate to a already won board, an issue arises where they have to input twice
- note* it works, just clunkily
HOW TO HANDLE TIES



COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff works REALLY well for comparing versions to remember what you changed

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* we changed the printable main board from an array of TicTacToes to an array of
  arrays bc TicTacToe's limited functionality led to immense pain and difficulty.
* wonBoards from array of booleans to ints (see v7 for more)

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BRUTE FORCE GETS THE JOB DONE!
Subclasses are nice, but not all the time (the tale of TicTacToe)
||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================

2021-01-13
--------------------------------------------------------------
balloons :: select project goal : to create a terminal-running ultimate tic tac toe (Tic-Tac-Toe)^2.
            beginning w/ 2 player, if time allows computer v. human?
WL :: initialize repo + files
==============================================================

2021-01-14
--------------------------------------------------------------
SE :: begin working on UML
JM :: proof of concept on a normal tic tac toe game (easy mode?)
WL :: brought up having an easy mode, regular tic tac toe, alongside the ultimate tic tac toe
==============================================================

2021-01-16
--------------------------------------------------------------
SE :: propro completed
JM :: printable board
WL :: idea array of tic tac toes for main board
==============================================================

2021-01-18 v3
--------------------------------------------------------------
SE :: commented in all plans, for implementation tonight
JM :: ^^
WL :: worked on the printing problem
==============================================================

2021-01-18 v4
--------------------------------------------------------------
SE :: Same as JM
JM :: Wrote Ultimate.java to encompass the majority of gameplay
WL :: Tried implementing for-loop toString method
==============================================================

2021-01-18 v5
--------------------------------------------------------------
SE :: Same as JM
JM :: Wrote Woo.java to encompass user interface
WL :: Same as JM
==============================================================

2021-01-19 v6
--------------------------------------------------------------
Added spacing
redid translate to only print what we are looking at
SE :: Drove, added spacing, and redid translate to only print what we are looking at
JM :: Added spacing, and redid translate to only print what we are looking at
WL :: Added spacing, and redid translate to only print what we are looking at
==============================================================

2021-01-19 v7
--------------------------------------------------------------
SE :: Changed wonBoards from an array of booleans, true if board was won and false otherwise
      to an array of ints, -1 if won by X, -2 if won by O, 0 if not won
      Changed translate to print large symbol of board winner
JM :: Drove, changed wonBoards from an array of booleans, true if board was won and false otherwise
      to an array of ints, -1 if won by X, -2 if won by O, 0 if not won
      Changed translate to print large symbol of board winner
WL :: Changed wonBoards from an array of booleans, true if board was won and false otherwise
      to an array of ints, -1 if won by X, -2 if won by O, 0 if not won
      Changed translate to print large symbol of board winner
==============================================================

2021-01-19 v8
--------------------------------------------------------------
SE :: Added isFilled()
      Added rules
      Updated playTurn() false condition to detect failure BEFORE selecting next square
JM :: Drove, added isFilled()
      Added rules
      Updated playTurn() false condition to detect failure BEFORE selecting next square
WL :: Came up with condition where we tie
      Added isFilled()
      Added rules
      Updated playTurn() false condition to detect failure BEFORE selecting next square
==============================================================

2021-01-21
--------------------------------------------------------------
SE :: added isFilledLocal
JM :: brough up if a board is filled but no one won ^^
WL :: brought up the problem of if every board is won, but not in a winning formation. ^^
==============================================================
